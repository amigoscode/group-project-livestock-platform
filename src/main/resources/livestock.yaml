openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: "Livestock exchange platform "

  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "1.0"
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://server/api/v1
tags:
  - name: user
  - name: order
paths:
  /users:
    get:
      tags:
        - user
      summary: get a list of users.
      description: get a list of users.
      operationId: listUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{userId}:
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user Id supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid user Id supplied
        '404':
          description: User not found
    get:
      tags:
        - user
      summary: get an individual user by id.
      description: get a specific user.
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user Id supplied
        '404':
          description: User not found
  /orders:
    get:
      tags:
        - order
      summary: get a list of orders.
      description: get a list of orders.
      operationId: listOrders
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      tags:
        - order
      summary: Create order
      operationId: createOrder
      requestBody:
        description: Created order object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
  /orders/{orderId}:
    put:
      tags:
        - order
      summary: Update order
      operationId: updateOrder
      parameters:
        - name: orderId
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent order in database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - order
      summary: Delete order
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: The order that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid order Id supplied
        '404':
          description: User not found
    get:
      tags:
        - order
      summary: get an individual user by id.
      description: get a specific user.
      operationId: getOrder
      parameters:
        - name: orderId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  /products:
    get:
      tags:
        - product
      summary: get a list of products.
      description: get a list of products.
      operationId: listProducts
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags:
        - product
      summary: Create product
      operationId: createProduct
      requestBody:
        description: Created product object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /products/{productId}:
    put:
      tags:
        - product
      summary: Update product
      operationId: updateProduct
      parameters:
        - name: productId
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent product in database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - product
      summary: Delete product
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          description: The product that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid product Id supplied
        '404':
          description: User not found
    get:
      tags:
        - product
      summary: get an individual user by id.
      description: get a specific user.
      operationId: getProduct
      parameters:
        - name: productId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /deliveries:
    get:
      tags:
        - delivery
      summary: get a list of deliveries.
      description: get a list of deliveries.
      operationId: listDeliveries
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Delivery'
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Delivery'
    post:
      tags:
        - delivery
      summary: Create delivery
      operationId: createDelivery
      requestBody:
        description: Created delivery object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Delivery'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
  /deliveries/{deliveryId}:
    put:
      tags:
        - delivery
      summary: Update delivery
      operationId: updateDelivery
      parameters:
        - name: deliveryId
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent delivery in database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Delivery'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - delivery
      summary: Delete delivery
      operationId: deleteDelivery
      parameters:
        - name: deliveryId
          in: path
          description: The delivery that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid delivery Id supplied
        '404':
          description: User not found
    get:
      tags:
        - delivery
      summary: get an individual user by id.
      description: get a specific user.
      operationId: getDelivery
      parameters:
        - name: deliveryId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Delivery'
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Delivery'
  /carts:
    get:
      tags:
        - cart
      summary: get a list of carts.
      description: get a list of carts.
      operationId: listCarts
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
    post:
      tags:
        - cart
      summary: Create cart
      operationId: createCart
      requestBody:
        description: Created cart object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
  /carts/{cartId}:
    put:
      tags:
        - cart
      summary: Update cart
      operationId: updateCart
      parameters:
        - name: cartId
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent cart in database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - cart
      summary: Delete cart
      operationId: deleteCart
      parameters:
        - name: cartId
          in: path
          description: The cart that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid cart Id supplied
        '404':
          description: User not found
    get:
      tags:
        - cart
      summary: get an individual user by id.
      description: get a specific user.
      operationId: getCart
      parameters:
        - name: cartId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
  /transactions:
    get:
      tags:
        - transaction
      summary: get a list of transactions.
      description: get a list of transactions.
      operationId: listTransactions
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
    post:
      tags:
        - transaction
      summary: Create transaction
      operationId: createTransaction
      requestBody:
        description: Created transaction object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
  /transactions/{transactionId}:
    put:
      tags:
        - transaction
      summary: Update transaction
      operationId: updateTransaction
      parameters:
        - name: transactionId
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent transaction in database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - transaction
      summary: Delete transaction
      operationId: deleteTransaction
      parameters:
        - name: transactionId
          in: path
          description: The transaction that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid transaction Id supplied
        '404':
          description: User not found
    get:
      tags:
        - transaction
      summary: get an individual user by id.
      description: get a specific user.
      operationId: getTransaction
      parameters:
        - name: transactionId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          description: not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Delivery:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Transaction:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    User:
      type: object
      properties:
        id:
          type: number
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        emailAddress:
          type: string
          format: email
          example: john@email.com
        password:
          type: string
          format: password
          example: '12345'
        phoneNumber:
          type: number
          example: '12345'
        postalCode:
          type: string
          description: User Status
          example: '1234A'
        userType:
          type: string
          description: User Status
          example: 'seller'
        city:
          type: string
          description: User city
          example: 'C-T'
        state:
          type: string
          description: User Status
          example: 'ST'
        country:
          type: string
          description: User Status
          example: 'CO'
        deliveryAddress:
          type: string
          description: User Status
          example: '1, first street'
        billingAddress:
          type: string
          description: User Status
          example: '2, second street'

      xml:
        name: user
    Cart:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Product:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet